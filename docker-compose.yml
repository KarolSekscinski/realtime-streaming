version: '3.8'


services:

  data-producer:
    container_name: data-producer
    build:
      context: ./Finnhub
      dockerfile: Dockerfile
    environment:
      KAFKA_TOPIC_NAME: market
      KAFKA_SERVER: kafka-broker
      KAFKA_PORT: "29092"
    ports:
      - "8001:8001"
    depends_on:
      kafka-broker-init:
        condition: service_completed_successfully
    networks:
      - pipeline

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pipeline

  kafka-broker-init:
    image: confluentinc/cp-kafka:7.2.10
    container_name: kafka-broker-init
    depends_on:
      - kafka-broker
    entrypoint: [ '/bin/sh', '-c' ]
    volumes:
      - ./kafka/setup-kafka.sh:/setup-kafka.sh
    networks:
      - pipeline
    command: "/setup-kafka.sh"

  kafka-broker:
    image: confluentinc/cp-kafka:7.2.10
    hostname: kafka-broker
    container_name: kafka-broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka-broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://kafka-broker:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - pipeline

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.0
    container_name: kafdrop
    restart: "no"
    depends_on:
      - kafka-broker
      - zookeeper
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka-broker:29092
    networks:
      - pipeline

  main-processor:
    container_name: main-processor
    hostname: main-processor
    build:
      context: ProcessorSpark
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
      - "4040:4040"
    environment:
      SPARK_PUBLIC_DNS: localhost
    depends_on:
      - spark-master
      - spark-worker-1
      - spark-worker-2
      - cassandra-db
      - cassandra-db-init
#    volumes:
#      - ./ProcessorSpark/src/main/resources/schemas:/app/resources/schemas
    networks:
      - pipeline


  spark-master:
    container_name: spark-master
    hostname: spark-master
    build:
      context: ProcessorSpark/spark
      dockerfile: Dockerfile.spark-master
    environment:
      INIT_DAEMON_SETUP: setup_spark
      SPARK_PUBLIC_DNS: localhost
    ports:
      - "9090:8080"
      - "7077:7077"
    networks:
      - pipeline


  spark-worker-1:
    container_name: spark-worker-1
    hostname: spark-worker-1
    build:
      context: ProcessorSpark/spark
      dockerfile: Dockerfile.spark-worker
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - SPARK_PUBLIC_DNS=localhost
    networks:
      - pipeline

  spark-worker-2:
    container_name: spark-worker-2
    hostname: spark-worker-2
    build:
      context: ProcessorSpark/spark
      dockerfile: Dockerfile.spark-worker
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
      - SPARK_PUBLIC_DNS=localhost
    networks:
      - pipeline

  cassandra-db-init:
    image: cassandra:4.1.5
    container_name: cassandra-init
    depends_on:
      cassandra-db:
        condition: service_healthy
    volumes:
      - ./cassandra/setup-cassandra.cql:/setup-cassandra.cql
    networks:
      - pipeline
    command: [ '/bin/bash', '-c', 'echo loading cassandra keyspace && cqlsh cassandra -u cassandra -p cassandra -f /setup-cassandra.cql' ]


  cassandra-db:
    image: cassandra:4.1.5
    container_name: cassandra
    hostname: cassandra
    ports:
      - "9042:9042"
    environment: &environment
      MAX_HEAP_SIZE: 256M
      HEAP_NEWSIZE: 128M
      CASSANDRA_USERNAME: cassandra
      CASSANDRA_PASSWORD: cassandra
      CASSANDRA_CLUSTER_NAME: CassandraCluster
      CASSANDRA_NUM_TOKENS: 128
      CASSANDRA_DATACENTER: DataCenter1
      CASSANDRA_RACK: Rack1
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
    healthcheck:
      test: ["CMD", "cqlsh",  "-u cassandra", "-p cassandra", "-e DESCRIBE KEYSPACES;"]
      interval: 15s
      timeout: 10s
      retries: 8
    networks:
      - pipeline

#  plotly:
#    container_name: plotly
#    build:
#      context: ./plotly
#      dockerfile: Dockerfile
#    ports:
#      - "8050:8050"
#    depends_on:
#      - cassandra-db
#    networks:
#      - pipeline

networks:
  pipeline:
    driver: bridge
