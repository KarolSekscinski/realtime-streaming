name: realtime-p

x-spark-common: &spark-common
  build:
    context: ./Processor/spark
    dockerfile: Dockerfile.spark
  command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
  depends_on:
    - spark-master
  environment:
    SPARK_MODE: worker
    SPARK_WORKER_CORES: 2
    SPARK_WORKER_MEMORY: 1g
    SPARK_MASTER_URL: spark://spark-master:7077
  networks:
    - pipeline


services:

  data-producer:
    container_name: data-producer
    build:
      context: ./Finnhub
      dockerfile: Dockerfile
    environment:
      KAFKA_TOPIC_NAME: market
      KAFKA_SERVER: kafka-broker
      KAFKA_PORT: "29092"
    ports:
      - "8001:8001"
    depends_on:
      kafka-broker-init:
        condition: service_completed_successfully
    networks:
      - pipeline

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ['CMD', 'bash', '-c', "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pipeline

  kafka-broker-init:
    image: confluentinc/cp-kafka:7.2.10
    container_name: kafka-broker-init
    depends_on:
      - kafka-broker
    entrypoint: [ '/bin/sh', '-c' ]
    volumes:
      - ./kafka/setup-kafka.sh:/setup-kafka.sh
    networks:
      - pipeline
    command: "/setup-kafka.sh"

  kafka-broker:
    image: confluentinc/cp-kafka:7.2.10
    hostname: kafka-broker
    container_name: kafka-broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka-broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://kafka-broker:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - pipeline

  kafdrop:
    image: obsidiandynamics/kafdrop:4.0.0
    container_name: kafdrop
    restart: "no"
    depends_on:
      - kafka-broker
      - zookeeper
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka-broker:29092
#      JVM_OPTS: "-Xms16M -Xmx512M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    networks:
      - pipeline


#  spark-master:
#    container_name: spark-master
#    hostname: spark-master
#    build:
#      context: ./Processor/spark
#      dockerfile: Dockerfile.spark
#    command: bin/spark-class org.apache.spark.deploy.master.Master
#    ports:
#      - "9090:8080"
#      - "7077:7077"
#    networks:
#      - pipeline
#
#
#  spark-worker-1:
#    container_name: spark-worker-1
#    hostname: spark-worker-1
#    <<: *spark-common
#
#  spark-worker-2:
#    container_name: spark-worker-2
#    hostname: spark-worker-2
#    <<: *spark-common

  cassandra-db-init:
    image: cassandra:4.1.5
    container_name: cassandra-init
    depends_on:
      cassandra-db:
        condition: service_healthy
    volumes:
      - ./cassandra/setup-cassandra.cql:/setup-cassandra.cql
    networks:
      - pipeline
    command: [ '/bin/bash', '-c', 'echo loading cassandra keyspace && cqlsh cassandra -u cassandra -p cassandra -f /setup-cassandra.cql' ]


  cassandra-db:
    image: cassandra:4.1.5
    container_name: cassandra
    hostname: cassandra
    ports:
      - "9042:9042"
    environment:
      - MAX_HEAP_SIZE=256M
      - HEAP_NEWSIZE=128M
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
    healthcheck:
      test: ["CMD", "cqlsh -u cassandra -p cassandra -e 'DESCRIBE KEYSPACES;'"]
      interval: 15s
      timeout: 10s
      retries: 8
    networks:
      - pipeline

  plotly:
    container_name: plotly
    build:
      context: ./plotly
      dockerfile: Dockerfile
    ports:
      - "8050:8050"
    depends_on:
      - cassandra-db

networks:
  pipeline:
    driver: bridge
